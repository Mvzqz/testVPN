name: test worflow

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project/Environment to run tests on'
        required: true
        default: 'STAGING'
        type: choice
        options:
          - 'STAGING'
          - 'PROD'
          - 'PLASMIC'
          - 'DEVELOP'
          - 'STAGING_BRAZIL'
          - 'PROD_BRAZIL'
      freeUsers:
        description: 'Create Free users'
        required: false
        default: false
        type: boolean
      monthlyUsers:
        description: 'Create Monthly users'
        required: false
        default: false
        type: boolean
      annualUsers:
        description: 'Create Annual users'
        required: false
        default: false
        type: boolean
      startIndex:
        description: 'Starting list index'
        required: true
        type: number
      userCount:
        description: 'number of users to create'
        required: true
        type: number

jobs:
  generate_parameters:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      tags: ${{ steps.set_tags.outputs.tags }}
    steps:
      - name: generate List
        id: set_matrix
        run: |
          n=${{ github.event.inputs.userCount }}
          list=()
          for ((i=1; i<=$n; i++)); do
            list+=("\"$i/$n\",")
          done
          echo "list={\"matrix\":'[${list[@]}]'}"
          echo "list={\"matrix\":'[${list[@]}]'}" >> $GITHUB_OUTPUT
      - name: create tags
        id: set_tags
        run:
          list=()

          if [[ "${{ github.event.inputs.freeUsers }}" == "true" ]]; then
            list+="free"
          fi

          if [[ "${{ github.event.inputs.monthlyUsers }}" == "true" ]]; then
            list+="monthly"
          fi

          if [[ "${{ github.event.inputs.annualUsers }}" == "true" ]]; then
            list+="annual"
          fi

          echo "::set-output name=tags::$(IFS=\|; echo "${list[*]}")" 
  test:
    needs: generate_parameters
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        shart: ${{fromJson(needs.generate_parameters.outputs.matrix)}}

    steps:
      - name: print tags
        run: echo "${{ needs.generate_parameters.outputs.tags}}"
      - name: print matrix
        run: echo "${{ matrix.shard }}"

